import { readdir, mkdir, stat } from 'node:fs/promises';
import path from 'node:path';
import sharp from 'sharp';

const srcDir = 'images';
const outDir = path.join(srcDir, 'opt');
const exts = new Set(['.jpg', '.jpeg', '.png', '.heic', '.heif', '.webp']);
const widths = [800, 1600];
const qualityJpg = 82;
const qualityWebp = 82;

async function exists(p){ try { await stat(p); return true; } catch { return false; } }
async function ensureDir(p){ try { await mkdir(p, { recursive: true }); } catch {} }

async function walk(dir) {
  const entries = await readdir(dir, { withFileTypes: true });
  const files = [];
  for (const e of entries) {
    const full = path.join(dir, e.name);
    if (e.isDirectory()) {
      // opt-Ordner überspringen, damit wir nicht endlos reoptimieren
      if (full.startsWith(path.join(srcDir, 'opt'))) continue;
      files.push(...await walk(full));
    } else {
      const ext = path.extname(e.name).toLowerCase();
      if (exts.has(ext)) files.push(full);
    }
  }
  return files;
}

function outPaths(src, w) {
  const rel = path.relative(srcDir, src).replace(/\.[^.]+$/, '');
  const dir = path.join(outDir, path.dirname(rel));
  const name = path.basename(rel);
  return {
    dir,
    jpg: path.join(dir, `${name}-${w}.jpg`),
    webp: path.join(dir, `${name}-${w}.webp`)
  };
}

(async () => {
  if (!await exists(srcDir)) {
    console.log('No images directory; skipping.');
    process.exit(0);
  }
  const files = await walk(srcDir);
  if (!files.length) {
    console.log('No source images; nothing to do.');
    process.exit(0);
  }
  await ensureDir(outDir);

  for (const f of files) {
    for (const w of widths) {
      try {
        const { dir, jpg, webp } = outPaths(f, w);
        await ensureDir(dir);
        const p = sharp(f, { failOn: 'none' }).rotate().resize({ width: w, withoutEnlargement: true });
        await p.clone().jpeg({ quality: qualityJpg, mozjpeg: true }).toFile(jpg);
        await p.clone().webp({ quality: qualityWebp }).toFile(webp);
        console.log('✓', f, '->', jpg, 'and', webp);
      } catch (e) {
        console.error('Failed:', f, e.message);
      }
    }
  }
})();
